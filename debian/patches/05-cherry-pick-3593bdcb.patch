Origin: commit 3593bdcbfa17d38b93cac9f5486e845f5d9b0511
Author: Manuel A. Fernandez Montecelo <manuel.montezelo@gmail.com>
Date: Sat Aug 1 20:10:24 2015 +0100
Description: Convert std::auto_ptr (deprecated in C++11) to unique_ptr

diff --git a/src/cmdline/cmdline_prompt.cc b/src/cmdline/cmdline_prompt.cc
index 9b7b0ec..d4de2e4 100644
--- a/src/cmdline/cmdline_prompt.cc
+++ b/src/cmdline/cmdline_prompt.cc
@@ -808,11 +808,11 @@ static void cmdline_parse_why(string response,
       arguments.pop_back();
       const boost::shared_ptr<why_callbacks> callbacks =
         make_cmdline_why_callbacks(0, term_metrics);
-      std::auto_ptr<cw::fragment> frag(do_why(arguments, root,
-					      aptitude::why::no_summary,
-					      false, false,
-                                              callbacks,
-                                              success));
+      std::unique_ptr<cw::fragment> frag(do_why(arguments, root,
+						aptitude::why::no_summary,
+						false, false,
+						callbacks,
+						success));
       if(frag.get() != NULL)
         {
           const unsigned int screen_width = term_metrics->get_screen_width();
diff --git a/src/cmdline/cmdline_resolver.cc b/src/cmdline/cmdline_resolver.cc
index 1230158..f3c0cbc 100644
--- a/src/cmdline/cmdline_resolver.cc
+++ b/src/cmdline/cmdline_resolver.cc
@@ -1146,7 +1146,7 @@ namespace aptitude
 	  // The previous line will say "resolving dependencies...";
 	  // separate the solution from this message..
 	  std::cout << std::endl;
-	  std::auto_ptr<cw::fragment> story(solution_story(solution, NULL));
+	  std::unique_ptr<cw::fragment> story(solution_story(solution, NULL));
           const unsigned int screen_width = term_metrics->get_screen_width();
 	  std::cout << story->layout(screen_width, screen_width, cwidget::style());
 	}
diff --git a/src/cmdline/cmdline_util.cc b/src/cmdline/cmdline_util.cc
index 1ba8703..dbcdd09 100644
--- a/src/cmdline/cmdline_util.cc
+++ b/src/cmdline/cmdline_util.cc
@@ -474,7 +474,7 @@ download_manager::result cmdline_do_download(download_manager *m,
                                                         term_metrics,
                                                         term_output);
 
-  std::auto_ptr<download_signal_log> log(progress_display.first);
+  std::unique_ptr<download_signal_log> log(progress_display.first);
 
   // Dump errors here because prepare() might check for pending errors
   // and think something failed.
@@ -593,7 +593,7 @@ namespace aptitude
 	  for(vector<pkgIndexFile *>::const_iterator j = indexes->begin();
 	      j != indexes->end(); ++j)
 	    {
-	      std::auto_ptr<pkgSrcRecords::Parser> p((*j)->CreateSrcParser());
+	      std::unique_ptr<pkgSrcRecords::Parser> p((*j)->CreateSrcParser());
 
 	      if(_error->PendingError())
 		return source_package();
diff --git a/src/cmdline/cmdline_why.cc b/src/cmdline/cmdline_why.cc
index 7f920fe..2ff854d 100644
--- a/src/cmdline/cmdline_why.cc
+++ b/src/cmdline/cmdline_why.cc
@@ -1069,7 +1069,7 @@ namespace aptitude
         {
           if(verbosity > 1)
             {
-              std::auto_ptr<cw::fragment> tmp(cw::fragf(_("    ++ Examining %F\n"), print_dep(dep)));
+              std::unique_ptr<cw::fragment> tmp(cw::fragf(_("    ++ Examining %F\n"), print_dep(dep)));
               std::cout << tmp->layout(screen_width, screen_width, cw::style());
             }
         }
@@ -1142,9 +1142,9 @@ namespace aptitude
         {
           if(verbosity > 1)
             {
-              std::auto_ptr<cw::fragment> desc(justification_description(target, actions));
+              std::unique_ptr<cw::fragment> desc(justification_description(target, actions));
 
-              std::auto_ptr<cw::fragment> f(cw::fragf("Search for %F\n",
+              std::unique_ptr<cw::fragment> f(cw::fragf("Search for %F\n",
                                                       desc.release()));
               std::cout << f->layout(screen_width,
                                      screen_width,
@@ -1251,10 +1251,10 @@ int do_why(const std::vector<cwidget::util::ref_ptr<pattern> > &leaves,
   bool success = false;
   const boost::shared_ptr<why_callbacks> callbacks =
     make_cmdline_why_callbacks(verbosity, term_metrics);
-  std::auto_ptr<cw::fragment> f(do_why(leaves, root, display_mode,
-				       verbosity, root_is_removal,
-				       callbacks,
-                                       success));
+  std::unique_ptr<cw::fragment> f(do_why(leaves, root, display_mode,
+					 verbosity, root_is_removal,
+					 callbacks,
+					 success));
   const unsigned int screen_width = term_metrics->get_screen_width();
   // TODO: display each result as we find it.
   std::cout << f->layout(screen_width, screen_width, cw::style());
diff --git a/src/generic/apt/resolver_manager.cc b/src/generic/apt/resolver_manager.cc
index c3e2162..bf01ebc 100644
--- a/src/generic/apt/resolver_manager.cc
+++ b/src/generic/apt/resolver_manager.cc
@@ -1460,7 +1460,7 @@ void resolver_manager::reject_break_holds()
   cwidget::threads::mutex::lock l(mutex);
   background_suspender bs(*this);
 
-  std::auto_ptr<undo_group> undo(new undo_group);
+  std::unique_ptr<undo_group> undo(new undo_group);
 
   for(aptitude_universe::package_iterator pi = resolver->get_universe().packages_begin();
       !pi.end(); ++pi)
diff --git a/src/gtk/dpkg_terminal.cc b/src/gtk/dpkg_terminal.cc
index faca204..b3e9222 100644
--- a/src/gtk/dpkg_terminal.cc
+++ b/src/gtk/dpkg_terminal.cc
@@ -364,7 +364,7 @@ namespace gui
   {
     temp::name name;
 
-    std::auto_ptr<FileFd> listen_sock;
+    std::unique_ptr<FileFd> listen_sock;
     struct sockaddr_un addr;
 
   public:
@@ -378,7 +378,7 @@ namespace gui
       LOG_TRACE(Loggers::getAptitudeDpkgTerminal(),
 		"Listening on the temporary socket \"" << name.get_name() << "\".");
 
-      listen_sock = std::auto_ptr<FileFd>(new FileFd(fd));
+      listen_sock = std::unique_ptr<FileFd>(new FileFd(fd));
 
       const size_t max_socket_name = sizeof(addr.sun_path);
 
@@ -447,7 +447,7 @@ namespace gui
 
     struct sockaddr_un addr;
 
-    std::auto_ptr<FileFd> fd;
+    std::unique_ptr<FileFd> fd;
 
   public:
     temporary_client_socket(const temp::name &_name)
@@ -470,7 +470,7 @@ namespace gui
       addr.sun_family = AF_UNIX;
       strncpy(addr.sun_path, name.get_name().c_str(), max_socket_name);
 
-      fd = std::auto_ptr<FileFd>(new FileFd(open_unix_socket()));
+      fd = std::unique_ptr<FileFd>(new FileFd(open_unix_socket()));
 
 
       if(connect(fd->Fd(), (struct sockaddr *)&addr, sizeof(addr)) != 0)
@@ -509,10 +509,10 @@ namespace gui
     // fixed so that I could just make an internal pipe. :-(
     LOG_TRACE(logger, "Opening sockets to parent process.");
 
-    std::auto_ptr<temporary_client_socket> dpkg_sock;
+    std::unique_ptr<temporary_client_socket> dpkg_sock;
     try
       {
-	dpkg_sock = std::auto_ptr<temporary_client_socket>(new temporary_client_socket(dpkg_socket_name));
+	dpkg_sock = std::unique_ptr<temporary_client_socket>(new temporary_client_socket(dpkg_socket_name));
       }
     catch(TemporarySocketFail &ex)
       {
@@ -588,13 +588,13 @@ namespace gui
 
     // To avoid races, we bind the receive end of the socket first and
     // start accepting connections.
-    std::auto_ptr<temporary_listen_socket> listen_sock;
+    std::unique_ptr<temporary_listen_socket> listen_sock;
 
     try
       {
         // TODO: now that I control the fork() call, I can probably
         // use pipes instead of a socket.
-	listen_sock = std::auto_ptr<temporary_listen_socket>(new temporary_listen_socket(dpkg_socket_name, 1));
+	listen_sock = std::unique_ptr<temporary_listen_socket>(new temporary_listen_socket(dpkg_socket_name, 1));
       }
     catch(TemporarySocketFail &ex)
       {
diff --git a/src/gtk/entitysummary.cc b/src/gtk/entitysummary.cc
index bc65148..52cc91c 100644
--- a/src/gtk/entitysummary.cc
+++ b/src/gtk/entitysummary.cc
@@ -54,7 +54,7 @@ namespace gui
 
       void do_dispatch_action(PackagesAction action)
       {
-	std::auto_ptr<undo_group> undo(new undo_group);
+	std::unique_ptr<undo_group> undo(new undo_group);
 	{
 	  aptitudeDepCache::action_group group(*apt_cache_file, undo.get());
 	  e->dispatch_action(action, true);
diff --git a/src/gtk/entityview.cc b/src/gtk/entityview.cc
index acd08a6..49c163e 100644
--- a/src/gtk/entityview.cc
+++ b/src/gtk/entityview.cc
@@ -740,7 +740,7 @@ namespace gui
         iter_list.push_back(model->get_iter(*path));
       }
 
-      std::auto_ptr<undo_group> undo(new undo_group);
+      std::unique_ptr<undo_group> undo(new undo_group);
       {
 	aptitudeDepCache::action_group group(*apt_cache_file, undo.get());
 	for(int pass = 0; pass < 2; ++pass)
diff --git a/src/gtk/gui.cc b/src/gtk/gui.cc
index 0c244b4..2837b1d 100644
--- a/src/gtk/gui.cc
+++ b/src/gtk/gui.cc
@@ -988,7 +988,7 @@ namespace gui
 
   void do_keep_all()
   {
-    std::auto_ptr<undo_group> undo(new apt_undo_group);
+    std::unique_ptr<undo_group> undo(new apt_undo_group);
     aptitudeDepCache::action_group group(*apt_cache_file, undo.get());
 
     for(pkgCache::PkgIterator i=(*apt_cache_file)->PkgBegin();
diff --git a/src/gtk/pkgview.cc b/src/gtk/pkgview.cc
index 4f0a674..23853fe 100644
--- a/src/gtk/pkgview.cc
+++ b/src/gtk/pkgview.cc
@@ -510,7 +510,7 @@ namespace gui
 
     LOG_TRACE(logger, "PkgView build thread: telling main thread to continue.");
 
-    std::auto_ptr<PkgTreeModelGenerator> generator(generatorK(columns));
+    std::unique_ptr<PkgTreeModelGenerator> generator(generatorK(columns));
 
     bool limited = limit.valid();
 
diff --git a/src/load_grouppolicy.cc b/src/load_grouppolicy.cc
index ae3b8cd..c520f28 100644
--- a/src/load_grouppolicy.cc
+++ b/src/load_grouppolicy.cc
@@ -264,7 +264,7 @@ public:
 				 const string::const_iterator &end)
   {
     string name;
-    auto_ptr<group_policy_parse_node> rval(NULL);
+    unique_ptr<group_policy_parse_node> rval(nullptr);
 
     while(begin != end)
       {
@@ -317,24 +317,24 @@ public:
 					name.c_str());
 	    else
 	      {
-		auto_ptr<group_policy_parse_node> curr(found->second->parse(begin, end));
+		unique_ptr<group_policy_parse_node> curr(found->second->parse(begin, end));
 
-		if(rval.get() != NULL && rval.get()->terminal())
+		if(rval.get() != nullptr && rval.get()->terminal())
 		  throw GroupParseException(_("Terminal policy '%s' should be the last policy in the list"), last.c_str());
 
 
-		if(rval.get() == NULL)
-		  rval = curr;
+		if(rval.get() == nullptr)
+		  rval.swap(curr);
 		else
-		  rval = auto_ptr<group_policy_parse_node>(new group_policy_pair_node(rval.release(), curr.release()));
+		  rval = unique_ptr<group_policy_parse_node>(new group_policy_pair_node(rval.release(), curr.release()));
 	      }
 	  }
       }
 
-    if(rval.get() == NULL)
-      rval = auto_ptr<group_policy_parse_node>(new group_policy_end_node);
+    if(rval.get() == nullptr)
+      rval = unique_ptr<group_policy_parse_node>(new group_policy_end_node);
     else if(!rval->terminal())
-      rval = auto_ptr<group_policy_parse_node>(new group_policy_pair_node(rval.release(), new group_policy_end_node));
+      rval = unique_ptr<group_policy_parse_node>(new group_policy_pair_node(rval.release(), new group_policy_end_node));
 
     eassert(rval->terminal());
     return rval.release();
@@ -640,7 +640,7 @@ class pattern_policy_parser : public group_policy_parser
 								     true, false, false));
 
 	bool passthrough = false;
-	std::auto_ptr<pkg_grouppolicy_factory> chain;
+	std::unique_ptr<pkg_grouppolicy_factory> chain;
 
 	if(!pattern.valid())
 	  throw GroupParseException(_("Unable to parse pattern after \"%s\""),
@@ -713,7 +713,7 @@ class pattern_policy_parser : public group_policy_parser
 
 	    list_policy_parser subpolicy_tail_parser(parse_types, '}');
 
-	    std::auto_ptr<group_policy_parse_node>
+	    std::unique_ptr<group_policy_parse_node>
 	      sub_parse_node(subpolicy_tail_parser.parse(begin, end));
 
 	    chain.reset(sub_parse_node->instantiate(NULL));
@@ -782,7 +782,7 @@ pkg_grouppolicy_factory *parse_grouppolicy(const string &s)
 
   try
     {
-      auto_ptr<group_policy_parse_node> node(list_policy_parser(parse_types).parse(begin, s.end()));
+      unique_ptr<group_policy_parse_node> node(list_policy_parser(parse_types).parse(begin, s.end()));
 
       eassert(begin == s.end());
 
diff --git a/src/pkg_ver_item.cc b/src/pkg_ver_item.cc
index e159e40..56fe2d3 100644
--- a/src/pkg_ver_item.cc
+++ b/src/pkg_ver_item.cc
@@ -450,7 +450,7 @@ void setup_package_versions(const pkgCache::PkgIterator &pkg, pkg_vertree *tree,
   for(pkgCache::PrvIterator i=pkg.ProvidesList(); !i.end(); i++)
     tree->add_child(new pkg_ver_item(i.OwnerVer(), sig, true));
 
-  std::auto_ptr<pkg_sortpolicy> sorter(pkg_sortpolicy_ver(0, false));
+  std::unique_ptr<pkg_sortpolicy> sorter(pkg_sortpolicy_ver(0, false));
   pkg_sortpolicy_wrapper wrap(sorter.get());
   tree->sort(wrap);
 }
@@ -469,7 +469,7 @@ void setup_package_versions(const pkgCache::PkgIterator &pkg, pkg_vertree_generi
       tree->inc_num_versions();
     }
 
-  std::auto_ptr<pkg_sortpolicy> sorter(pkg_sortpolicy_ver(0, false));
+  std::unique_ptr<pkg_sortpolicy> sorter(pkg_sortpolicy_ver(0, false));
   pkg_sortpolicy_wrapper wrap(sorter.get());
   tree->sort(wrap);
 }
diff --git a/src/ui.cc b/src/ui.cc
index 5f25855..b322f1a 100644
--- a/src/ui.cc
+++ b/src/ui.cc
@@ -1382,7 +1382,7 @@ static void do_keep_all()
   if(apt_cache_file == NULL)
     return;
 
-  auto_ptr<undo_group> undo(new apt_undo_group);
+  unique_ptr<undo_group> undo(new apt_undo_group);
 
   aptitudeDepCache::action_group group(*apt_cache_file, undo.get());
 
