commit bc3b024667a0b6f5c5c7ded59f7b7f80e383603b
Author: Manuel A. Fernandez Montecelo <manuel.montezelo@gmail.com>
Date:   Sat Dec 12 13:33:18 2015 +0000

    Lazy initialisation and better encapsulation of metadata download cache
    
    This avoids some problems in builders, like pbuilder (not all env vars are
    cleaned, or for some reason the home of the user invoking aptitude inside
    pbuilder does not exist), and when home or some specific directories are not
    writable for some reason.
    
    This "metadata download cache" is only necessary for screenshots (GTK+,
    possibly Qt?, disabled for a long time and probably removed soon), and to
    store successfully downloaded changelogs after the user explicitly requests
    that operation in command line or TUI/curses mode -- which does not happen
    in every session, and never at all like when autobuilders use aptitude as
    resolver.

diff --git a/src/generic/apt/apt.cc b/src/generic/apt/apt.cc
index 921ef5d..d267965 100644
--- a/src/generic/apt/apt.cc
+++ b/src/generic/apt/apt.cc
@@ -93,6 +93,10 @@ sigc::signal0<void> consume_errors;
 
 static string apt_native_arch;
 
+// Access to the download_cache
+std::shared_ptr<aptitude::util::file_cache> download_cache;
+
+
 static void reset_interesting_dep_memoization()
 {
   delete[] cached_deps_interesting;
@@ -464,7 +468,22 @@ void apt_load_cache(OpProgress *progress_bar, bool do_initselections,
   LOG_TRACE(logger, "Initializing global dependency resolver manager.");
   resman = new resolver_manager(new_file, imm::map<aptitude_resolver_package, aptitude_resolver_version>());
 
-  LOG_TRACE(logger, "Initializing the download cache.");
+  LOG_DEBUG(logger, "Emitting cache_reloaded().");
+  cache_reloaded();
+
+  LOG_TRACE(logger, "Done emitting cache_reloaded().");
+}
+
+std::shared_ptr<aptitude::util::file_cache> get_download_cache()
+{
+  // return if already initialised
+  if (download_cache)
+    return download_cache;
+
+  logging::LoggerPtr logger(Loggers::getAptitudeAptGlobals());
+
+  LOG_INFO(logger, "Loading download_cache.");
+
   // Open the download cache.  By default, it goes in
   // ~/.cache/aptitude/metadata-download; it has 512Kb of in-memory cache and
   // 10MB of on-disk cache.
@@ -497,9 +516,17 @@ void apt_load_cache(OpProgress *progress_bar, bool do_initselections,
       {
 	const char* env_HOME = getenv("HOME");
 	string home = (! strempty(env_HOME)) ? string(env_HOME) : get_homedir();
-	if ( ! home.empty())
+	if (home.empty())
+	  {
+	    _error->Error(_("Could not establish home directory (username: '%s')"), get_username().c_str());
+	  }
+	else if ( ! fs::is_directory(home) )
+	  {
+	    _error->Error(_("Home directory does not exist or is not a directory: '%s')"), home.c_str());
+	  }
+	else
 	  {
-	    xdg_cache_home = string(env_HOME) + "/.cache";
+	    xdg_cache_home = home + "/.cache";
 	  }
       }
 
@@ -580,10 +607,7 @@ void apt_load_cache(OpProgress *progress_bar, bool do_initselections,
       }
   }
 
-  LOG_DEBUG(logger, "Emitting cache_reloaded().");
-  cache_reloaded();
-
-  LOG_TRACE(logger, "Done emitting cache_reloaded().");
+  return download_cache;
 }
 
 void apt_reload_cache(OpProgress *progress_bar, bool do_initselections,
diff --git a/src/generic/apt/apt.h b/src/generic/apt/apt.h
index 412dbf3..21367bb 100644
--- a/src/generic/apt/apt.h
+++ b/src/generic/apt/apt.h
@@ -138,7 +138,7 @@ extern sigc::signal0<void> consume_errors;
 /** \brief Used to cache downloaded data, to avoid multiple
  *  downloads of items such as changelogs and screenshots.
  */
-extern std::shared_ptr<aptitude::util::file_cache> download_cache;
+std::shared_ptr<aptitude::util::file_cache> get_download_cache();
 
 void apt_dumpcfg(const char *root);
 // Dumps a subtree of the configuration to ~/.aptitude/config
diff --git a/src/generic/apt/changelog_parse.cc b/src/generic/apt/changelog_parse.cc
index 2f20734..fa9e8b9 100644
--- a/src/generic/apt/changelog_parse.cc
+++ b/src/generic/apt/changelog_parse.cc
@@ -483,7 +483,10 @@ namespace aptitude
 	    {
 	      LOG_TRACE(get_log_category(),
 			"Caching digested changelog as " << changelog_uri);
-	      download_cache->putItem(changelog_uri, digested.get_name());
+
+	      auto download_cache = get_download_cache();
+	      if (download_cache)
+		download_cache->putItem(changelog_uri, digested.get_name());
 	    }
 
 	  cw::util::ref_ptr<aptitude::apt::changelog> parsed =
diff --git a/src/generic/apt/download_queue.cc b/src/generic/apt/download_queue.cc
index 6454677..dceebb7 100644
--- a/src/generic/apt/download_queue.cc
+++ b/src/generic/apt/download_queue.cc
@@ -340,7 +340,10 @@ namespace aptitude
 		     << lastModifiedTimeStr << "]) : "
 		     << LookupTag(Message, "Message"));
 
-	    download_cache->putItem(job->get_uri(), job->get_filename().get_name(), lastModifiedTime);
+	    auto download_cache = get_download_cache();
+	    if (download_cache)
+	      download_cache->putItem(job->get_uri(), job->get_filename().get_name(), lastModifiedTime);
+
 	    job->invoke_success(job->get_filename());
 	  }
 
@@ -561,7 +564,8 @@ namespace aptitude
 
 	void process_job(const std::shared_ptr<start_request> &job)
 	{
-	  if(download_cache)
+	  auto download_cache = get_download_cache();
+	  if (download_cache)
 	    {
 	      time_t mtime;
 	      temp::name filename =
diff --git a/src/generic/apt/globals.cc b/src/generic/apt/globals.cc
index 91688d1..c903069 100644
--- a/src/generic/apt/globals.cc
+++ b/src/generic/apt/globals.cc
@@ -44,6 +44,3 @@ pkgRecords *apt_package_records=NULL;
 pkgSourceList *apt_source_list=NULL;
 undo_list *apt_undos=NULL;
 resolver_manager *resman = NULL;
-
-std::shared_ptr<aptitude::util::file_cache> download_cache;
-
diff --git a/src/gtk/changelog.cc b/src/gtk/changelog.cc
index 3306b7b..b396067 100644
--- a/src/gtk/changelog.cc
+++ b/src/gtk/changelog.cc
@@ -864,8 +864,9 @@ namespace gui
 		  << " under the cache URI "
 		  << uri);
 
-	predigested_file = download_cache->getItem(uri);
-	if(predigested_file.valid())
+	auto download_cache = get_download_cache();
+	predigested_file = download_cache && download_cache->getItem(uri);
+	if (predigested_file.valid())
 	  LOG_TRACE(logger, "Changelog preparation thread: found a predigested changelog for "
 		    << req->get_target_info()->get_source_package()
 		    << " " << req->get_target_info()->get_source_version()
